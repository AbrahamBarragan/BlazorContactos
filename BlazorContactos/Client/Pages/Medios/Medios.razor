@page "/Medios"


@inject HttpClient http
@inject NavigationManager navigationManager

<h3>Medios</h3>

<div class="row justify-content-end">
	<div class="col-lg-3 text-end">
		<button type="button" class="btn btn-success" @onclick=@(() => navigationManager.NavigateTo("Medio"))>Agregar</button>
	</div>
</div>

@if (medios == null)
{
	<h1>Cargando...</h1>
}
else if (medios.Count == 0)
{
	<h1>No se encontraron Medios registrados...</h1>
}
else
{
	<div class="table-responsive">
		<table class="table text-center table-hover">
			<thead class="table-striped">
				<tr>
					<th scope="col">Id</th>
					<th scope="col">Email</th>
					<th scope="col">Telefono</th>
					<th scope="col">Celular</th>
					<th scope="col">Opciones</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var medio in medios)
				{
					<tr>
						<td>@medio.Id</td>
						<td>@medio.Email</td>
						<td>@medio.Telefono</td>
						<td>@medio.Celular</td>

						<td>
							<button class="btn btn-primary" type="button" @onclick=@(() => navigationManager.NavigateTo($"medio/{medio.Id}"))>Editar</button>
							<button class="btn btn-danger" type="button" @onclick="@(() => Eliminar(medio))">Eliminar</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@code {
	protected List<MedioContactoDTO> medios;

	protected override async Task OnInitializedAsync()
	{
		var response = await http.GetFromJsonAsync<List<MedioContactoDTO>>("api/medioz");
		if (response != null)
		{
			medios = response;
		}
	}

	protected async Task Eliminar(MedioContactoDTO medio)
	{
		await http.DeleteAsync($"api/medioz/{medio.Id}");
		medios.Remove(medio);
	}
}

