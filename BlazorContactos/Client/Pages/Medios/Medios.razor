@page "/Medios"
@page "/Medios/{id:int}"

@inject HttpClient http
@inject NavigationManager navigationManager

<h3>Medios</h3>

<EditForm Model="medio" OnInvalidSubmit="OnValidSubmit">
	<DataAnnotationsValidator />

	<div class="col-lg-12">
		<div class="mb-3">
			<label class="from-label">Email</label>
			<InputText id="Email" class="from-control" @bind-Value="@medio.Email" />
			<ValidationMessage For="@(() => medio.Email)" />
		</div>
	</div>

	<div class="col-lg-12 text-end mb-3 pt-4">
		<hr />
		<button type="button" class="btn-danger" onclick="history.back()">Cancelar</button>
		<button type="submit" class="btn btn-success">Guardar</button>
	</div>

</EditForm>

@code {
	protected MedioContactoDTO medio = new MedioContactoDTO();
	[Parameter] public int id { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		if (id > 0)
		{
			var response = await http.GetFromJsonAsync<MedioContactoDTO>($"api/medios/{id}");
			if (response != null)
			{
				medio = response;
			}
		}
	}

	private async Task OnValidSubmit()
	{
		if (id > 0)
		{
			await http.PutAsJsonAsync<MedioContactoDTO>("api/medios", medio);
		}
		else
		{
			await http.PostAsJsonAsync<MedioContactoDTO>("api/medios", medio);
		}
		navigationManager.NavigateTo("medios");
	}

}
