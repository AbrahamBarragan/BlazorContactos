@page "/contacto"
@page "/contacto/{id:int}"

@inject HttpClient http
@inject NavigationManager navigationManager

<h3>Contacto</h3>

<EditForm Model="contacto" OnInvalidSubmit="OnValidSubmit">
	<DataAnnotationsValidator />

	<div class="col-lg-12">
		<div class="mb-3">
			<label class="from-label">Nombre</label>
			<InputText id="Nombre" class="from-control" @bind-Value="@contacto.Nombre"/>
			<ValidationMessage For="@(() => contacto.Nombre)"/>
		</div>
	</div>

	<div class="col-lg-12 text-end mb-3 pt-4">
		<hr/>
		<button type="button" class="btn-danger" onclick="history.back()">Cancelar</button>
		<button type="submit" class="btn btn-success">Guardar</button>
	</div>

	</EditForm>


@code {
	protected ContactoDTO contacto = new ContactoDTO();
	[Parameter] public int id { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		if (id > 0)
		{
			var response = await http.GetFromJsonAsync<ContactoDTO>($"api/contactos/{id}");
			if (response != null)
			{
				contacto = response;
			}
		}
	}

	private async Task OnValidSubmit()
	{
		if (id > 0)
		{
			await http.PutAsJsonAsync<ContactoDTO>("api/contactos", contacto);
		}
		else
		{
			await http.PostAsJsonAsync<ContactoDTO>("api/contactos", contacto);
		}
		navigationManager.NavigateTo("contactos");
	}
}
