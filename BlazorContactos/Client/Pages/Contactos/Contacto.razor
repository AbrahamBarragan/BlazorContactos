@page "/contacto"
@page "/contacto/{id:int}"

@inject HttpClient http
@inject NavigationManager navigationManager

<h3>Contacto</h3>

<EditForm Model="contacto" OnInvalidSubmit="OnValidSubmit">
	<DataAnnotationsValidator />

	<div class="col-lg-12">
		<div class="mb-3">
			<label class="from-label">Nombre</label>
			<InputText id="Nombre" class="from-control" @bind-Value="@contacto.Nombre"/>
			<ValidationMessage For="@(() => contacto.Nombre)"/>
		</div>
	</div>

			<div class="form-group">
				<button type="button" class="btn btn-secondary" @onclick="@(() => contacto.Medios.Add(new MedioContactoDTO()))">Agregar Medios</button>
			</div>

			@for (var i = 0; i < contacto.Medios.Count; i++)
			{
				var indice = i;
				var medio = contacto.Medios[i];

				<h5>Contacto</h5>

				<div class="form-group">
					<label class="from-label">Email:</label>
					<InputText id="Email" class="from-control" @bind-Value="@medio.Email" />
					<ValidationMessage For="@(() => medio.Email)" />
				</div>
				<div class="form-group">
					<label class="from-label">Telefono:</label>
					<InputText id="Telefono" class="from-control" @bind-Value="@medio.Telefono" />
					<ValidationMessage For="@(() => medio.Telefono)" />
				</div>
				<div class="form-group">
					<label class="from-label">Celular:</label>
					<InputText id="Celular" class="from-control" @bind-Value="@medio.Celular" />
					<ValidationMessage For="@(() => medio.Celular)" />
				</div>

				<button type="button" class="btn btn-danger" @onclick="@(() => contacto.Medios.RemoveAt(indice))">Remover</button>
			}
		
	<div class="col-lg-12 text-end mb-3 pt-4">
		<hr/>
		<button type="button" class="btn btn-danger" onclick="history.back()">Cancelar</button>
		<button type="submit" class="btn btn-success">Guardar</button>
	</div>
</EditForm>


@code {
	protected ContactoDTO contacto = new ContactoDTO();
	[Parameter] public int id { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		if (id > 0)
		{
			var response = await http.GetFromJsonAsync<ContactoDTO>($"api/contactoz/{id}");
			if (response != null)
			{
				contacto = response;
			}
		}
	}

	private async Task OnValidSubmit()
	{
		if (id > 0)
		{
			await http.PutAsJsonAsync<ContactoDTO>("api/contactoz", contacto);
		}
		else
		{
			await http.PostAsJsonAsync<ContactoDTO>("api/contactoz", contacto);
		}
		navigationManager.NavigateTo("contactos");
	}
}
